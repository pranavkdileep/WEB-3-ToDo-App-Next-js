/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/abVtvMCc2FV
 */
import { Toggle } from "@/components/ui/toggle"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Checkbox } from "@/components/ui/checkbox"
import { Label } from "@/components/ui/label"
import { ConnectButton } from "@rainbow-me/rainbowkit"
import { useWriteContract,useWaitForTransactionReceipt,useAccount } from 'wagmi' 
import {abi,contactaddress} from '../app/abi'
import { useState,useEffect } from "react"

export type Task ={
  completed: boolean;
  content: string;
  id: number;
  owner: string;
};
type MainTodoProps = {  tasks: Task[]};

export function MainTodo({ tasks }: MainTodoProps) {
  const account = useAccount(); 
  const [newtaskcontent,setnewtask] = useState('');
  const { data: hash, writeContract,isPending } = useWriteContract() ;
  const { isLoading: isConfirming, isSuccess: isConfirmed } = 
    useWaitForTransactionReceipt({ 
      hash, 
    }) 
  useEffect(
    () => {
      if (isConfirmed) {
        setnewtask('');
        console.log('confirmed');
        window.location.reload();
      }
    },
    [isConfirmed]
  );
  const handlecompletetask = (id: number) => {
    writeContract({
      abi,
      address: contactaddress,
      functionName: 'completeTask',
      args: [id],
      account: account.address,
    })
  };
  return (
    <div className="dark min-h-screen bg-gray-900 text-gray-200">
      <header className="flex items-center justify-between p-4 border-b border-gray-700">
        <h1 className="text-2xl font-bold">Todo App</h1>
        <ConnectButton /> 
      </header>
      <main className="p-4">
        <form className="flex items-center gap-2 mb-4">
          <Input className="flex-1" placeholder="Add a new todo..." type="text" onChange={event => {setnewtask(event.target.value)}} />
          <Button className="bg-gray-300 rounded-md text-black" type="button" onClick={()=>{
            writeContract({
              abi,
              address: contactaddress,
              functionName: 'createTask',
              args: [newtaskcontent],
            })
          }}>Add Task</Button>
        </form>
        <ul className="space-y-2">
  {tasks && tasks.map((task) => (
    <li key={task.id} className="flex items-center justify-between p-4 bg-gray-800 rounded-md">
      <div className="flex items-center gap-2">
        <Checkbox checked={task.completed} onClick={() => {
          console.log('toggle');
          handlecompletetask(task.id);
        }} />
        <Label>{task.content}</Label>
      </div>
      <Button size="icon" variant="ghost" type="button" onClick={()=>{
        writeContract({
          abi,
          address: contactaddress,
          functionName: 'deleteTask',
          args: [task.id],
          account: account.address,
        })
      }}>
        <Trash2Icon className="h-4 w-4" />
      </Button>
    </li>
  ))}
</ul>
        <div className="mt-4 flex justify-between">
          {isConfirming && (
            <div className="flex items-center gap-2">
            <LoaderIcon className="animate-spin h-5 w-5 mr-3" />
            Loading...
          </div>
          )}
          {isPending && (
            <div className="flex items-center gap-2">
            <LoaderIcon className="animate-spin h-5 w-5 mr-3" />
            Approve transaction
          </div>
          )}
          <Button variant="outline" type="button" onClick={() => {
            writeContract({
              abi,
              address: contactaddress,
              functionName: 'clearCompletedTasks',
              account: account.address,
            })
          }}>Clear all</Button>
        </div>
      </main>
    </div>
  )
}


function MoonIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z" />
    </svg>
  )
}


function Trash2Icon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M3 6h18" />
      <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6" />
      <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2" />
      <line x1="10" x2="10" y1="11" y2="17" />
      <line x1="14" x2="14" y1="11" y2="17" />
    </svg>
  )
}


function LoaderIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <line x1="12" x2="12" y1="2" y2="6" />
      <line x1="12" x2="12" y1="18" y2="22" />
      <line x1="4.93" x2="7.76" y1="4.93" y2="7.76" />
      <line x1="16.24" x2="19.07" y1="16.24" y2="19.07" />
      <line x1="2" x2="6" y1="12" y2="12" />
      <line x1="18" x2="22" y1="12" y2="12" />
      <line x1="4.93" x2="7.76" y1="19.07" y2="16.24" />
      <line x1="16.24" x2="19.07" y1="7.76" y2="4.93" />
    </svg>
  )
}
